 Expanded(
            child: ValueListenableBuilder(
                valueListenable: getStoredBloodPsr,
                builder: (context, bloodlist, child) {
                  return ListView.separated(
                    separatorBuilder: (context, index) =>
                        const SizedBox(height: 0),
                    itemBuilder: (BuildContext, int index) {
                      BloodPressureModel singleValue = bloodlist[index];
                      return InkWell(
                        onTap: () {
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (context) => BloodPressurePage(),
                          ));
                        },
                        child: ListTile(
                          title: Text(
                            '${singleValue.bloodmmcount.toString()}/${singleValue.bloodHgCount.toString()}',
                          ),
                          subtitle: Text('${formate.format(singleValue.date)}'),
                        ),
                      );
                    },
                    itemCount: bloodlist.length,
                  );
                }),
          ),
          Expanded(
              child: ValueListenableBuilder(
                  valueListenable: getStoredPulse,
                  builder: (context, pulseList, child) {
                    return ListView.builder(
                      itemBuilder: (BuildContext, int index) {
                        PulseClassModel singleValue = pulseList[index];
                        return InkWell(
                          onTap: () {
                            Navigator.of(context).push(MaterialPageRoute(
                              builder: (context) => const PulsePage(),
                            ));
                          },
                          child: ListTile(
                            title: Text('${singleValue.rateOfpulse}'),
                            subtitle:
                                Text('${formate.format(singleValue.date)}'),
                          ),
                        );
                      },
                      itemCount: pulseList.length,
                    );
                  })),
          Expanded(
              child: ValueListenableBuilder(
                  valueListenable: getStoredHeight,
                  builder: (context, HeightList, child) {
                    return ListView.builder(
                      itemBuilder: (BuildContext, int index) {
                        HeightModelClass singleValue = HeightList[index];
                        return InkWell(
                          onTap: () {
                            Navigator.of(context).push(MaterialPageRoute(
                              builder: (context) =>
                                  const SugarLevelMeasurement(),
                            ));
                          },
                          child: ListTile(
                            title: Text('${singleValue.textController}'),
                            subtitle:
                                Text('${formate.format(singleValue.date)}'),
                          ),
                        );
                      },
                      itemCount: HeightList.length,
                    );
                  })),
          Expanded(
              child: ValueListenableBuilder(
                  valueListenable: getStoredWeight,
                  builder: (context, WeightList, child) {
                    return ListView.builder(
                      itemBuilder: (BuildContext, int index) {
                        WeightClassModel singleValue = WeightList[index];
                        return InkWell(
                          onTap: () {
                            Navigator.of(context).push(MaterialPageRoute(
                              builder: (context) => const WeightPage(),
                            ));
                          },
                          child: ListTile(
                            title: Text('${singleValue.controller}'),
                            subtitle:
                                Text('${formate.format(singleValue.date)}'),
                          ),
                        );
                      },
                      itemCount: WeightList.length,
                    );
                  })),